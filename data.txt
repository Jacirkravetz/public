Ajustes no FixAppWrapper
Adicione um mecanismo de sincronização por lock + sinalização com AutoResetEvent para indicar quando há nova mensagem.

csharp
Copiar
Editar
public class FixAppWrapper : IApplication
{
    private Message _lastReceivedMessage;
    private SessionID _lastSessionID;
    private readonly AutoResetEvent _messageReceivedEvent = new(false); // controle de sinalização
    private readonly object _lock = new();

    public bool TryGetLastMessage(out Message message, out SessionID sessionID)
    {
        lock (_lock)
        {
            message = _lastReceivedMessage;
            sessionID = _lastSessionID;
            if (message != null)
            {
                _lastReceivedMessage = null;
                _lastSessionID = null;
                return true;
            }
        }
        return false;
    }

    public void FromApp(Message message, SessionID sessionID)
    {
        lock (_lock)
        {
            _lastReceivedMessage = message;
            _lastSessionID = sessionID;
        }
        _messageReceivedEvent.Set(); // sinaliza que há mensagem
    }

    public bool WaitForMessage(int timeoutMilliseconds = Timeout.Infinite)
    {
        return _messageReceivedEvent.WaitOne(timeoutMilliseconds);
    }

    // ... restante do código (Init, Stop, etc.)
}
✅ Atualize FixSessionService.Execute() para loop de escuta
csharp
Copiar
Editar
public void Execute()
{
    _logger.LogInformation("Iniciando escuta contínua de mensagens FIX...");

    while (true)
    {
        // Aguarda até uma nova mensagem chegar
        var messageAvailable = _fixAppWrapper.WaitForMessage();

        if (messageAvailable)
        {
            if (_fixAppWrapper.TryGetLastMessage(out var message, out var sessionID))
            {
                var table = ConvertMessageToDataTable(message);
                _logger.LogInformation($"Mensagem processada com sucesso: {table.Rows.Count} linha(s)");
            }
            else
            {
                _logger.LogWarning("Evento disparado, mas nenhuma mensagem foi recuperada.");
            }
        }
    }
}
✅ Método auxiliar para montar o DataTable (copiado da sua lógica anterior)
csharp
Copiar
Editar
private DataTable ConvertMessageToDataTable(Message message)
{
    var dataTable = new DataTable("FixMessage");

    foreach (var field in message.Header)
        dataTable.Columns.Add("Header_" + field.Key, typeof(string));

    foreach (var field in message)
        dataTable.Columns.Add("Body_" + field.Key, typeof(string));

    foreach (var field in message.Trailer)
        dataTable.Columns.Add("Trailer_" + field.Key, typeof(string));

    var row = dataTable.NewRow();

    foreach (var field in message.Header)
        row["Header_" + field.Key] = field.Value;

    foreach (var field in message)
        row["Body_" + field.Key] = field.Value;

    foreach (var field in message.Trailer)
        row["Trailer_" + field.Key] = field.Value;

    dataTable.Rows.Add(row);

    return dataTable;
}
