laro! Abaixo estÃ¡ o mÃ©todo GetSerializer<T> completo e funcional em C#, suportando os seguintes formatos:

âœ… Avro (com Schema Registry)

âœ… Protobuf (com Schema Registry)

âœ… Json Schema (com Schema Registry)

âœ… Plain JSON (sem Schema Registry)

âœ… XML (sem Schema Registry)

âœ… YAML (sem Schema Registry)

âœ… Enum SerializationFormat
csharp
Copiar
Editar
public enum SerializationFormat
{
    Avro,
    Protobuf,
    JsonSchema,
    JsonPlain,
    Xml,
    Yaml
}
âœ… Serializers Customizados (Plain JSON, XML, YAML)
csharp
Copiar
Editar
using System.Text;
using System.Xml.Serialization;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using Confluent.Kafka;
using Newtonsoft.Json;

public class JsonPlainSerializer<T> : ISerializer<T>
{
    public byte[] Serialize(T data, SerializationContext context)
    {
        return Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(data));
    }
}

public class XmlSerializerCustom<T> : ISerializer<T>
{
    public byte[] Serialize(T data, SerializationContext context)
    {
        if (data == null) return null!;
        var xmlSerializer = new XmlSerializer(typeof(T));
        using var stream = new MemoryStream();
        xmlSerializer.Serialize(stream, data);
        return stream.ToArray();
    }
}

public class YamlSerializer<T> : ISerializer<T>
{
    private readonly ISerializer _serializer;

    public YamlSerializer()
    {
        _serializer = new SerializerBuilder()
            .WithNamingConvention(CamelCaseNamingConvention.Instance)
            .Build();
    }

    public byte[] Serialize(T data, SerializationContext context)
    {
        if (data == null) return null!;
        var yaml = _serializer.Serialize(data);
        return Encoding.UTF8.GetBytes(yaml);
    }
}
âœ… MÃ©todo GetSerializer<T>
csharp
Copiar
Editar
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;

public static class SerializerFactory
{
    public static ISerializer<T> GetSerializer<T>(
        SerializationFormat format,
        ISchemaRegistryClient? schemaRegistryClient = null)
    {
        return format switch
        {
            SerializationFormat.Avro => schemaRegistryClient != null
                ? new AvroSerializer<T>(schemaRegistryClient)
                : throw new ArgumentNullException(nameof(schemaRegistryClient), "SchemaRegistryClient is required for Avro."),

            SerializationFormat.Protobuf => schemaRegistryClient != null
                ? new ProtobufSerializer<T>(schemaRegistryClient)
                : throw new ArgumentNullException(nameof(schemaRegistryClient), "SchemaRegistryClient is required for Protobuf."),

            SerializationFormat.JsonSchema => schemaRegistryClient != null
                ? new JsonSerializer<T>(schemaRegistryClient)
                : throw new ArgumentNullException(nameof(schemaRegistryClient), "SchemaRegistryClient is required for JSON Schema."),

            SerializationFormat.JsonPlain => new JsonPlainSerializer<T>(),

            SerializationFormat.Xml => new XmlSerializerCustom<T>(),

            SerializationFormat.Yaml => new YamlSerializer<T>(),

            _ => throw new NotSupportedException($"Format {format} is not supported.")
        };
    }
}
ðŸ“¦ Pacotes NuGet necessÃ¡rios:
bash
Copiar
Editar
dotnet add package Confluent.Kafka
dotnet add package Confluent.SchemaRegistry
dotnet add package Confluent.SchemaRegistry.Serdes.Avro
dotnet add package Confluent.SchemaRegistry.Serdes.Protobuf
dotnet add package Confluent.SchemaRegistry.Serdes.Json
dotnet add package YamlDotNet
dotnet add package Newtonsoft.Json
