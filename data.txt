using System.Collections.Generic;
using System.Data;
using Xunit;

public class XmlRecursiveExtractorTests
{
    [Fact]
    public void ExtractSections_WithWildcard_ShouldReturnAllFields()
    {
        string xml = @"<Root><Order id='1'><Customer><Name>John</Name></Customer></Order></Root>";

        var result = XmlRecursiveExtractor.ExtractSections(
            xml,
            scopeTag: "Order",
            includedSections: new List<string> { "*" });

        Assert.Single(result.Rows);
        Assert.Equal("1", result.Rows[0]["Order_@id"]);
        Assert.Equal("John", result.Rows[0]["Order_Customer_Name"]);
    }

    [Fact]
    public void ExtractSections_WithSpecificTag_ShouldOnlyIncludeThose()
    {
        string xml = @"<Root><Order><Customer><Name>Ana</Name></Customer><Payment><Value>100</Value></Payment></Order></Root>";

        var result = XmlRecursiveExtractor.ExtractSections(
            xml,
            scopeTag: "Order",
            includedSections: new List<string> { "Customer" });

        Assert.Single(result.Rows);
        Assert.Equal("Ana", result.Rows[0]["Order_Customer_Name"]);
        Assert.False(result.Columns.Contains("Order_Payment_Value"));
    }

    [Fact]
    public void ExtractSections_ShouldHandleMultipleOrders()
    {
        string xml = @"<Root>
            <Order id='1'><Customer><Name>Pedro</Name></Customer></Order>
            <Order id='2'><Customer><Name>Maria</Name></Customer></Order>
        </Root>";

        var result = XmlRecursiveExtractor.ExtractSections(
            xml,
            scopeTag: "Order",
            includedSections: new List<string> { "*" });

        Assert.Equal(2, result.Rows.Count);
        Assert.Equal("Pedro", result.Rows[0]["Order_Customer_Name"]);
        Assert.Equal("Maria", result.Rows[1]["Order_Customer_Name"]);
    }

    [Fact]
    public void ExtractSections_ShouldIncludeAttributesAsColumns()
    {
        string xml = @"<Root><Order id='10'><Customer taxId='123'><Name>Juca</Name></Customer></Order></Root>";

        var result = XmlRecursiveExtractor.ExtractSections(
            xml,
            scopeTag: "Order",
            includedSections: new List<string> { "*" });

        Assert.Equal("10", result.Rows[0]["Order_@id"]);
        Assert.Equal("123", result.Rows[0]["Order_Customer_@taxId"]);
    }

    [Fact]
    public void ExtractSections_WithNoIncludedTags_ShouldReturnEmptyColumns()
    {
        string xml = @"<Root><Order><Customer><Name>Tiago</Name></Customer></Order></Root>";

        var result = XmlRecursiveExtractor.ExtractSections(
            xml,
            scopeTag: "Order",
            includedSections: new List<string>());

        Assert.Single(result.Rows);
        Assert.Empty(result.Columns); // Nenhuma seção incluída
    }
}
