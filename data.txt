using Confluent.Kafka;
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;
using Newtonsoft.Json;
using System;
using System.Net;
using System.Xml.Serialization;
using YamlDotNet.Serialization;

public static class KafkaConsumerFactory
{
    public static IConsumer<TKey, TValue> CreateConsumer<TKey, TValue>(
        SerializationFormat format,
        ConsumerConfig consumerConfig,
        string? schemaRegistryUrl = null,
        WebProxy? proxy = null)
    {
        var schemaRegistryConfig = new SchemaRegistryConfig();

        if (!string.IsNullOrEmpty(schemaRegistryUrl))
        {
            schemaRegistryConfig.Url = schemaRegistryUrl;

            if (proxy != null)
                schemaRegistryConfig.Proxy = proxy;
        }

        ISchemaRegistryClient? schemaRegistryClient = null;
        if (format is SerializationFormat.Avro or SerializationFormat.Protobuf or SerializationFormat.JsonSchema)
        {
            schemaRegistryClient = new CachedSchemaRegistryClient(schemaRegistryConfig);
        }

        switch (format)
        {
            case SerializationFormat.Avro:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new AvroDeserializer<TValue>(schemaRegistryClient!))
                    .Build();

            case SerializationFormat.Protobuf:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new ProtobufDeserializer<TValue>(schemaRegistryClient!))
                    .Build();

            case SerializationFormat.JsonSchema:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new JsonDeserializer<TValue>(schemaRegistryClient!))
                    .Build();

            case SerializationFormat.JsonPlain:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new JsonPlainDeserializer<TValue>())
                    .Build();

            case SerializationFormat.Xml:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new XmlDeserializer<TValue>())
                    .Build();

            case SerializationFormat.Yaml:
                return new ConsumerBuilder<TKey, TValue>(consumerConfig)
                    .SetKeyDeserializer(Deserializers.Utf8)
                    .SetValueDeserializer(new YamlDeserializer<TValue>())
                    .Build();

            default:
                throw new NotSupportedException($"Unsupported format: {format}");
        }
    }
}
