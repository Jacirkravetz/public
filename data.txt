{
  "Kafka": {
    "BootstrapServers": "localhost:9092",
    "GroupId": "meu-grupo",
    "SslCaPem": "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkqhkiG9w...\n-----END CERTIFICATE-----",
    "SslCertificatePem": "-----BEGIN CERTIFICATE-----\nMIIBIjANBgkqhkiG9w...\n-----END CERTIFICATE-----",
    "SslKeyPem": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBA...\n-----END PRIVATE KEY-----",
    "SslKeyPassword": "minhaSenha"
  }
}
using System;
using System.IO;
using Microsoft.Extensions.Configuration;
using Confluent.Kafka;

public class KafkaService
{
    private readonly IConfiguration _configuration;
    private readonly ConsumerConfig _consumerConfig;

    public KafkaService()
    {
        // Carregar configura√ß√µes do appsettings.json
        _configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory()) 
            .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
            .Build();

        // Criar configura√ß√£o do consumidor Kafka com SSL
        _consumerConfig = new ConsumerConfig
        {
            BootstrapServers = _configuration["Kafka:BootstrapServers"],
            GroupId = _configuration["Kafka:GroupId"],
            AutoOffsetReset = AutoOffsetReset.Earliest,
            EnableAutoCommit = false,
            SecurityProtocol = SecurityProtocol.Ssl,
            SslCaPem = _configuration["Kafka:SslCaPem"],
            SslCertificatePem = _configuration["Kafka:SslCertificatePem"],
            SslKeyPem = _configuration["Kafka:SslKeyPem"],
            SslKeyPassword = _configuration["Kafka:SslKeyPassword"]
        };
    }

    public void StartConsumer(string topic)
    {
        using var consumer = new ConsumerBuilder<string, string>(_consumerConfig).Build();
        
        consumer.Subscribe(topic);
        Console.WriteLine($"üìå Consumindo mensagens do t√≥pico '{topic}'...");

        try
        {
            while (true)
            {
                var consumeResult = consumer.Consume();
                Console.WriteLine($"‚úÖ Mensagem recebida: Key={consumeResult.Message.Key}, Value={consumeResult.Message.Value}");
                consumer.Commit(consumeResult);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro no consumo: {ex.Message}");
        }
        finally
        {
            consumer.Close();
        }
    }
}
