using QuickFix;
using System;
using System.Collections.Generic;
using System.Linq;

public class FixApp : IApplication
{
    private readonly IFixConfigRepository _configRepository;

    public FixApp(IFixConfigRepository configRepository)
    {
        _configRepository = configRepository;
    }

    public void OnCreate(SessionID sessionID)
    {
        Console.WriteLine($"[OnCreate] Session created: {sessionID}");
    }

    public void OnLogon(SessionID sessionID)
    {
        Console.WriteLine($"[OnLogon] Session logged on: {sessionID}");
    }

    public void OnLogout(SessionID sessionID)
    {
        Console.WriteLine($"[OnLogout] Session logged out: {sessionID}");
    }

    public void FromAdmin(Message message, SessionID sessionID)
    {
        HandleMessage("FromAdmin", message, sessionID);
    }

    public void ToAdmin(Message message, SessionID sessionID)
    {
        HandleMessage("ToAdmin", message, sessionID);
    }

    public void FromApp(Message message, SessionID sessionID)
    {
        HandleMessage("FromApp", message, sessionID);
    }

    public void ToApp(Message message, SessionID sessionID)
    {
        HandleMessage("ToApp", message, sessionID);
    }

    private void HandleMessage(string source, Message message, SessionID sessionID)
    {
        string msgType = message.Header.GetString(Fields.Tags.MsgType);
        string sessionQualifier = sessionID.ToString();

        var config = _configRepository.GetConfigForSession(sessionQualifier);
        if (!IsConfigActive(config)) return;
        if (!ShouldMonitor(config, source, msgType)) return;

        LogMessage(source, sessionID, msgType, message);
    }

    private bool IsConfigActive(FixSessionMonitorConfig? config)
    {
        return config != null && config.IsActive;
    }

    private bool ShouldMonitor(FixSessionMonitorConfig config, string source, string msgType)
    {
        if (!IsOverrideEnabled(config, source)) return false;

        var msgTypes = GetMsgTypes(config, source);
        return msgTypes.Contains("*") || msgTypes.Contains(msgType);
    }

    private bool IsOverrideEnabled(FixSessionMonitorConfig config, string source) => source switch
    {
        "FromApp" => config.EnableFromApp,
        "ToApp" => config.EnableToApp,
        "FromAdmin" => config.EnableFromAdmin,
        "ToAdmin" => config.EnableToAdmin,
        _ => false
    };

    private string[] GetMsgTypes(FixSessionMonitorConfig config, string source) => source switch
    {
        "FromApp" => config.FromAppMsgTypes,
        "ToApp" => config.ToAppMsgTypes,
        "FromAdmin" => config.FromAdminMsgTypes,
        "ToAdmin" => config.ToAdminMsgTypes,
        _ => Array.Empty<string>()
    };

    private void LogMessage(string source, SessionID sessionID, string msgType, Message message)
    {
        Console.WriteLine($"[{source}] [{sessionID}] MsgType: {msgType}\n{message}");
    }
}
