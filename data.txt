using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;

public static class CutOffEvaluator
{
    public static bool IsWithinCutoff(IEnumerable<CutOffWindow> windows)
    {
        foreach (var window in windows)
        {
            if (!TryLoadTimeZone(window.TimeZoneId, out var timeZoneInfo))
            {
                Console.WriteLine($"⚠️ Invalid TimeZoneId: '{window.TimeZoneId}'");
                continue;
            }

            // Convert current UTC time to the target timezone
            var localTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZoneInfo);
            var localDay = localTime.DayOfWeek;
            var localTimeOfDay = localTime.TimeOfDay;

            if (window.DayOfWeek != localDay)
                continue;

            if (localTimeOfDay >= window.StartTime && localTimeOfDay <= window.EndTime)
                return true;
        }

        // If no match found, log the configured windows
        var sb = new StringBuilder();
        sb.AppendLine("❌ Outside of all Cut-Off Windows.");
        sb.AppendLine("🕒 Configured Cut-Off Windows:");

        foreach (var w in windows.OrderBy(w => w.DayOfWeek).ThenBy(w => w.StartTime))
        {
            sb.AppendLine($"- {w.DayOfWeek}: {w.StartTime:hh\\:mm} - {w.EndTime:hh\\:mm} (TimeZone: {w.TimeZoneId})");
        }

        Console.WriteLine(sb.ToString());
        return false;
    }

    private static bool TryLoadTimeZone(string timeZoneId, out TimeZoneInfo? tz)
    {
        // Try loading directly
        try
        {
            tz = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);
            return true;
        }
        catch (TimeZoneNotFoundException) { }
        catch (InvalidTimeZoneException) { }

        // Try cross-platform conversion
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            if (TimeZoneInfo.TryConvertIanaIdToWindowsId(timeZoneId, out var winId))
            {
                try
                {
                    tz = TimeZoneInfo.FindSystemTimeZoneById(winId);
                    return true;
                }
                catch { }
            }
        }
        else
        {
            if (TimeZoneInfo.TryConvertWindowsIdToIanaId(timeZoneId, out var ianaId))
            {
                try
                {
                    tz = TimeZoneInfo.FindSystemTimeZoneById(ianaId);
                    return true;
                }
                catch { }
            }
        }

        tz = null;
        return false;
    }
}
