üîß 1. Interface IFixAppWrapper
csharp
Copiar
Editar
using QuickFix;
using System.Data;

public interface IFixAppWrapper : IApplication
{
    /// <summary>
    /// Aguarda at√© uma nova mensagem ser recebida (com timeout opcional).
    /// </summary>
    bool WaitForMessage(int timeoutMilliseconds = System.Threading.Timeout.Infinite);

    /// <summary>
    /// Tenta obter a √∫ltima mensagem recebida.
    /// </summary>
    bool TryGetLastMessage(out Message message, out SessionID sessionID);
}
üß± 2. Implementa√ß√£o FixAppWrapper
csharp
Copiar
Editar
using QuickFix;
using System.Threading;

public class FixAppWrapper : IFixAppWrapper
{
    private Message _lastReceivedMessage;
    private SessionID _lastSessionID;
    private readonly AutoResetEvent _messageReceivedEvent = new(false);
    private readonly object _lock = new();

    public bool TryGetLastMessage(out Message message, out SessionID sessionID)
    {
        lock (_lock)
        {
            message = _lastReceivedMessage;
            sessionID = _lastSessionID;
            if (message != null)
            {
                _lastReceivedMessage = null;
                _lastSessionID = null;
                return true;
            }
        }
        return false;
    }

    public bool WaitForMessage(int timeoutMilliseconds = Timeout.Infinite)
    {
        return _messageReceivedEvent.WaitOne(timeoutMilliseconds);
    }

    public void FromApp(Message message, SessionID sessionID)
    {
        lock (_lock)
        {
            _lastReceivedMessage = message;
            _lastSessionID = sessionID;
        }
        _messageReceivedEvent.Set();
    }

    // M√©todos da interface IApplication (mantidos vazios ou conforme necessidade)
    public void OnCreate(SessionID sessionID) { }
    public void OnLogon(SessionID sessionID) { }
    public void OnLogout(SessionID sessionID) { }
    public void ToAdmin(Message message, SessionID sessionID) { }
    public void FromAdmin(Message message, SessionID sessionID) { }
    public void ToApp(Message message, SessionID sessionID) { }
}
‚öôÔ∏è 3. Servi√ßo FixSessionService
csharp
Copiar
Editar
using Microsoft.Extensions.Logging;
using QuickFix;
using System.Data;

public class FixSessionService
{
    private readonly IFixAppWrapper _fixAppWrapper;
    private readonly ILogger<FixSessionService> _logger;

    public FixSessionService(IFixAppWrapper fixAppWrapper, ILogger<FixSessionService> logger)
    {
        _fixAppWrapper = fixAppWrapper;
        _logger = logger;
    }

    public void Execute()
    {
        _logger.LogInformation("Iniciando escuta cont√≠nua de mensagens FIX...");

        while (true)
        {
            var messageAvailable = _fixAppWrapper.WaitForMessage();

            if (messageAvailable)
            {
                if (_fixAppWrapper.TryGetLastMessage(out var message, out var sessionID))
                {
                    var table = ConvertMessageToDataTable(message);
                    _logger.LogInformation($"Mensagem processada com sucesso: {table.Rows.Count} linha(s)");
                }
                else
                {
                    _logger.LogWarning("Evento disparado, mas nenhuma mensagem foi recuperada.");
                }
            }
        }
    }

    private DataTable ConvertMessageToDataTable(Message message)
    {
        var dataTable = new DataTable("FixMessage");

        foreach (var field in message.Header)
            dataTable.Columns.Add("Header_" + field.Key, typeof(string));

        foreach (var field in message)
            dataTable.Columns.Add("Body_" + field.Key, typeof(string));

        foreach (var field in message.Trailer)
            dataTable.Columns.Add("Trailer_" + field.Key, typeof(string));

        var row = dataTable.NewRow();

        foreach (var field in message.Header)
            row["Header_" + field.Key] = field.Value;

        foreach (var field in message)
            row["Body_" + field.Key] = field.Value;

        foreach (var field in message.Trailer)
            row["Trailer_" + field.Key] = field.Value;

        dataTable.Rows.Add(row);

        return dataTable;
    }
}
