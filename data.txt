using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Net.Http;
using System.Text.Json;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LargeDataFilterApp
{
    public partial class DataProcessorForm : Form
    {
        private readonly string _connectionString = "Server=YOUR_SERVER;Database=YOUR_DB;Trusted_Connection=True;TrustServerCertificate=True;";
        private readonly string _apiUrl = "https://yourapi.com/data/"; // Base URL â€” we'll append the ID
        private readonly HttpClient _httpClient = new HttpClient();

        public DataProcessorForm()
        {
            InitializeComponent();
        }

        private async void BtnLoadData_Click(object sender, EventArgs e)
        {
            try
            {
                string filterColumn = cmbFilterColumn.SelectedItem?.ToString();
                string filterValue = txtFilterValue.Text.Trim();

                if (string.IsNullOrWhiteSpace(filterColumn) || string.IsNullOrWhiteSpace(filterValue))
                {
                    MessageBox.Show("Please select a column and enter a filter value.", "Validation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string query = $"SELECT TOP 1000 * FROM LargeTable WHERE {filterColumn} LIKE @FilterValue";

                using var connection = new SqlConnection(_connectionString);
                using var command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@FilterValue", $"%{filterValue}%");

                var adapter = new SqlDataAdapter(command);
                var table = new DataTable();
                adapter.Fill(table);

                dataGridView1.DataSource = table;
                lblStatus.Text = $"{table.Rows.Count} rows loaded.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnApplyRegexFilter_Click(object sender, EventArgs e)
        {
            try
            {
                string pattern = txtRegexPattern.Text.Trim();
                if (string.IsNullOrWhiteSpace(pattern))
                {
                    MessageBox.Show("Please enter a valid regex pattern.", "Validation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (dataGridView1.DataSource is not DataTable table)
                {
                    MessageBox.Show("No data loaded to apply filter.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                var filteredTable = table.Clone();

                foreach (DataRow row in table.Rows)
                {
                    foreach (var item in row.ItemArray)
                    {
                        if (Regex.IsMatch(item?.ToString() ?? string.Empty, pattern))
                        {
                            filteredTable.ImportRow(row);
                            break;
                        }
                    }
                }

                dataGridView1.DataSource = filteredTable;
                lblStatus.Text = $"{filteredTable.Rows.Count} rows after regex filter.";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error applying regex filter: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void BtnProcessSelected_Click(object sender, EventArgs e)
        {
            try
            {
                if (dataGridView1.SelectedRows.Count == 0)
                {
                    MessageBox.Show("Please select at least one row to process.", "Validation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                foreach (DataGridViewRow row in dataGridView1.SelectedRows)
                {
                    if (row.Cells["Id"]?.Value == null) continue;

                    var id = row.Cells["Id"].Value.ToString();

                    // GET request with ID appended to base API URL
                    var apiResponse = await _httpClient.GetAsync($"{_apiUrl}{id}");
                    apiResponse.EnsureSuccessStatusCode();

                    var jsonResponse = await apiResponse.Content.ReadAsStringAsync();
                    var apiResult = JsonSerializer.Deserialize<ApiResult>(jsonResponse);

                    await SaveResultToDatabaseAsync(id, apiResult);
                }

                MessageBox.Show("Selected rows processed successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error processing selected rows: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task SaveResultToDatabaseAsync(string id, ApiResult result)
        {
            string insertQuery = "INSERT INTO ProcessedResults (RecordId, Status, ProcessedAt) VALUES (@RecordId, @Status, @ProcessedAt)";

            using var connection = new SqlConnection(_connectionString);
            using var command = new SqlCommand(insertQuery, connection);

            command.Parameters.AddWithValue("@RecordId", id);
            command.Parameters.AddWithValue("@Status", result?.Status ?? "Unknown");
            command.Parameters.AddWithValue("@ProcessedAt", DateTime.UtcNow);

            await connection.OpenAsync();
            await command.ExecuteNonQueryAsync();
        }
    }

    public class ApiResult
    {
        public string Status { get; set; }
    }
}
