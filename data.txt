using System.Net;
using System.Text;
using System.Xml.Serialization;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using Newtonsoft.Json;
using Confluent.Kafka;
using Confluent.SchemaRegistry;
using Confluent.SchemaRegistry.Serdes;

public static class KafkaProducerFactory
{
    public static IProducer<TKey, TValue> CreateProducer<TKey, TValue>(
        SerializationFormat format,
        ProducerConfig producerConfig,
        string? schemaRegistryUrl = null,
        WebProxy? proxy = null)
    {
        var schemaRegistryConfig = new SchemaRegistryConfig();

        if (!string.IsNullOrEmpty(schemaRegistryUrl))
        {
            schemaRegistryConfig.Url = schemaRegistryUrl;

            if (proxy != null)
                schemaRegistryConfig.Proxy = proxy;
        }

        ISchemaRegistryClient? schemaRegistryClient = null;
        if (format is SerializationFormat.Avro or SerializationFormat.Protobuf or SerializationFormat.JsonSchema)
        {
            schemaRegistryClient = new CachedSchemaRegistryClient(schemaRegistryConfig);
        }

        var builder = new ProducerBuilder<TKey, TValue>(producerConfig);

        builder.SetKeySerializer(Serializers.Utf8);

        switch (format)
        {
            case SerializationFormat.Avro:
                builder.SetValueSerializer(new AvroSerializer<TValue>(schemaRegistryClient!));
                break;

            case SerializationFormat.Protobuf:
                builder.SetValueSerializer(new ProtobufSerializer<TValue>(schemaRegistryClient!));
                break;

            case SerializationFormat.JsonSchema:
                builder.SetValueSerializer(new JsonSerializer<TValue>(schemaRegistryClient!));
                break;

            case SerializationFormat.JsonPlain:
                builder.SetValueSerializer(new JsonPlainSerializer<TValue>());
                break;

            case SerializationFormat.Xml:
                builder.SetValueSerializer(new XmlSerializerCustom<TValue>());
                break;

            case SerializationFormat.Yaml:
                builder.SetValueSerializer(new YamlSerializer<TValue>());
                break;

            default:
                throw new NotSupportedException($"Unsupported format: {format}");
        }

        return builder.Build();
    }
}
