using System;
using System.Linq;
using System.Threading.Tasks;
using Confluent.Kafka;
using Confluent.Kafka.Admin;

class Program
{
    static async Task Main(string[] args)
    {
        string bootstrapServers = "localhost:9092"; // Altere para o seu cluster
        string topicName = "meu-topico"; // Nome do t√≥pico que deseja consultar

        var config = new AdminClientConfig { BootstrapServers = bootstrapServers };

        using (var adminClient = new AdminClientBuilder(config).Build())
        {
            try
            {
                // Obtendo metadados do cluster e do t√≥pico
                var metadata = adminClient.GetMetadata(topicName, TimeSpan.FromSeconds(5));

                Console.WriteLine("üìå Informa√ß√µes do Cluster:");
                Console.WriteLine($"- Brokers dispon√≠veis: {string.Join(", ", metadata.Brokers.Select(b => $"{b.Host}:{b.Port} (ID {b.BrokerId})"))}");
                Console.WriteLine($"- Controlador do Cluster: Broker ID {metadata.OriginatingBrokerId}");

                if (metadata.Topics.Any())
                {
                    var topicMetadata = metadata.Topics.First();

                    Console.WriteLine($"\nüìå Informa√ß√µes do T√≥pico: {topicMetadata.Topic}");
                    Console.WriteLine($"- Status: {(topicMetadata.Error.IsError ? "Erro" : "OK")} ({topicMetadata.Error.Reason})");
                    Console.WriteLine($"- Parti√ß√µes: {topicMetadata.Partitions.Count}");

                    foreach (var partition in topicMetadata.Partitions)
                    {
                        Console.WriteLine($"\n  üîπ Parti√ß√£o {partition.PartitionId}:");
                        Console.WriteLine($"    - L√≠der: {partition.Leader}");
                        Console.WriteLine($"    - R√©plicas: {string.Join(", ", partition.Replicas.Select(r => r.ToString()))}");
                        Console.WriteLine($"    - ISR (In-Sync Replicas): {string.Join(", ", partition.InSyncReplicas.Select(r => r.ToString()))}");
                    }
                }
                else
                {
                    Console.WriteLine($"‚ùå O t√≥pico '{topicName}' n√£o foi encontrado.");
                }
            }
            catch (KafkaException ex)
            {
                Console.WriteLine($"‚ùå Erro ao recuperar metadados: {ex.Error.Reason}");
            }
        }
    }
}
