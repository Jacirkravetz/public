using System.Text.Json;
using System.ComponentModel.DataAnnotations.Schema;

public class EnrichmentStep
{
    public int Id { get; set; }
    public string StepName { get; set; }
    public string SqlQuery { get; set; }

    public string ConnectionString { get; set; }
    public string DestinationColumn { get; set; }

    // JSON-backed string fields
    public string FilterFieldsJson { get; set; }
    public string FixedParametersJson { get; set; }
    public string ApiHeadersJson { get; set; }
    public string ApiPayloadTemplateJson { get; set; }

    // Propriedades expostas como Dictionary/List
    [NotMapped]
    public List<string> FilterFields
    {
        get => string.IsNullOrEmpty(FilterFieldsJson) ? new() : JsonSerializer.Deserialize<List<string>>(FilterFieldsJson);
        set => FilterFieldsJson = JsonSerializer.Serialize(value);
    }

    [NotMapped]
    public Dictionary<string, string> FixedParameters
    {
        get => string.IsNullOrEmpty(FixedParametersJson) ? new() : JsonSerializer.Deserialize<Dictionary<string, string>>(FixedParametersJson);
        set => FixedParametersJson = JsonSerializer.Serialize(value);
    }

    [NotMapped]
    public Dictionary<string, string> ApiHeaders
    {
        get => string.IsNullOrEmpty(ApiHeadersJson) ? new() : JsonSerializer.Deserialize<Dictionary<string, string>>(ApiHeadersJson);
        set => ApiHeadersJson = JsonSerializer.Serialize(value);
    }

    [NotMapped]
    public Dictionary<string, string> ApiPayloadTemplate
    {
        get => string.IsNullOrEmpty(ApiPayloadTemplateJson) ? new() : JsonSerializer.Deserialize<Dictionary<string, string>>(ApiPayloadTemplateJson);
        set => ApiPayloadTemplateJson = JsonSerializer.Serialize(value);
    }

    public bool CacheEnabled { get; set; }
    public string CacheKeyTemplate { get; set; }

    public bool ApiFallbackEnabled { get; set; }
    public string ApiUrl { get; set; }
    public string ApiMethod { get; set; }
    public string ApiResponseField { get; set; }
}
