üìÅ 1. Core/BaseService.cs
csharp
Copiar
Editar
using QuickFix;

namespace FixMessageReader.Core;

public abstract class BaseService
{
    protected void Push(Message message)
    {
        Console.WriteLine($"[BaseService] Push: {message}");
        // Inser√ß√£o no banco ou outra l√≥gica
    }
}
üìÅ 2. FixEngine/FixMessageHandler.cs
csharp
Copiar
Editar
using QuickFix;

namespace FixMessageReader.FixEngine;

public class FixMessageHandler : MessageCracker, IApplication
{
    private readonly Action<Message> _onMessageReceived;

    public FixMessageHandler(Action<Message> onMessageReceived)
    {
        _onMessageReceived = onMessageReceived;
    }

    public void FromApp(Message message, SessionID sessionID)
    {
        Console.WriteLine("[Handler] Received message");
        Crack(message, sessionID);
        _onMessageReceived?.Invoke(message);
    }

    public void OnCreate(SessionID sessionID) { }
    public void OnLogon(SessionID sessionID) => Console.WriteLine($"[Handler] Logon: {sessionID}");
    public void OnLogout(SessionID sessionID) => Console.WriteLine($"[Handler] Logout: {sessionID}");
    public void ToAdmin(Message message, SessionID sessionID) { }
    public void FromAdmin(Message message, SessionID sessionID) { }
    public void ToApp(Message message, SessionID sessionID) { }
}
üìÅ 3. FixEngine/FixEngineBootstrapper.cs
csharp
Copiar
Editar
using QuickFix;

namespace FixMessageReader.FixEngine;

public class FixEngineBootstrapper
{
    private SocketInitiator? _initiator;

    public void Start(Action<Message> onMessageReceived)
    {
        var handler = new FixMessageHandler(onMessageReceived);

        var settings = new SessionSettings("App.config");
        var storeFactory = new FileStoreFactory(settings);
        var logFactory = new FileLogFactory(settings);

        _initiator = new SocketInitiator(handler, storeFactory, settings, logFactory);
        _initiator.Start();

        Console.WriteLine("[FixEngineBootstrapper] FIX engine started.");
    }

    public void Stop()
    {
        _initiator?.Stop();
        Console.WriteLine("[FixEngineBootstrapper] FIX engine stopped.");
    }
}
üìÅ 4. Services/FixProcessingService.cs
csharp
Copiar
Editar
using FixMessageReader.Core;
using FixMessageReader.FixEngine;
using QuickFix;

namespace FixMessageReader.Services;

public class FixProcessingService : BaseService
{
    private readonly FixEngineBootstrapper _fixBootstrapper;

    public FixProcessingService(FixEngineBootstrapper fixBootstrapper)
    {
        _fixBootstrapper = fixBootstrapper;
    }

    public void Execute()
    {
        _fixBootstrapper.Start(ExecuteStep);
        Console.WriteLine("[FixProcessingService] Press Enter to stop.");
        Console.ReadLine();
        _fixBootstrapper.Stop();
    }

    public void ExecuteStep(Message message)
    {
        Console.WriteLine($"[FixProcessingService] Executing step. MsgType: {message.Header.GetString(35)}");
        Push(message);
    }
}
üìÅ 5. Program.cs
csharp
Copiar
Editar
using FixMessageReader.FixEngine;
using FixMessageReader.Services;
using Microsoft.Extensions.DependencyInjection;

var services = new ServiceCollection();

services.AddSingleton<FixEngineBootstrapper>();
services.AddScoped<FixProcessingService>();

var provider = services.BuildServiceProvider();

var service = provider.GetRequiredService<FixProcessingService>();
service.Execute();
