public class JsonPlainDeserializer<T> : IDeserializer<T>
{
    public T Deserialize(ReadOnlyMemory<byte> data, bool isNull, SerializationContext context)
    {
        if (isNull) return default!;
        var jsonString = Encoding.UTF8.GetString(data.Span);
        return JsonConvert.DeserializeObject<T>(jsonString)!;
    }
}

public class XmlDeserializer<T> : IDeserializer<T>
{
    private readonly XmlSerializer _serializer = new XmlSerializer(typeof(T));

    public T Deserialize(ReadOnlyMemory<byte> data, bool isNull, SerializationContext context)
    {
        if (isNull) return default!;
        using var stream = new MemoryStream(data.Span);
        return (T)_serializer.Deserialize(stream)!;
    }
}

public class YamlDeserializer<T> : IDeserializer<T>
{
    private readonly IDeserializer<T> _deserializer = new DeserializerBuilder()
        .WithNamingConvention(CamelCaseNamingConvention.Instance)
        .Build();

    public T Deserialize(ReadOnlyMemory<byte> data, bool isNull, SerializationContext context)
    {
        if (isNull) return default!;
        var yamlString = Encoding.UTF8.GetString(data.Span);
        return _deserializer.Deserialize<T>(yamlString);
    }
}
