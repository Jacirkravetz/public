using System;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using NUnit.Framework;

[TestFixture]
public class CutOffEvaluatorTests
{
    private CutOffEvaluator _evaluator;

    [SetUp]
    public void Setup()
    {
        _evaluator = new CutOffEvaluator();
    }

    private CutOffWindow CreateCutOffWindow(string timeZoneId, DayOfWeek day, TimeSpan start, TimeSpan end,
                                            DateTime? tradeTime = null, TimeSpan? limitTime = null)
    {
        return new CutOffWindow
        {
            StepId = Guid.NewGuid(),
            DayOfWeek = day,
            StartTime = start,
            EndTime = end,
            TimeZoneId = timeZoneId,
            LocalTradeLimitTime = limitTime,
            LocalTradeLimitTimeField = tradeTime
        };
    }

    [TestCase("UTC")]
    [TestCase("America/Sao_Paulo")]
    [TestCase("Central European Standard Time")]
    public void Should_Accept_Trade_Inside_Window_And_Before_Limit(string timeZone)
    {
        var nowUtc = DateTime.UtcNow;
        var tz = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
        var nowLocal = TimeZoneInfo.ConvertTimeFromUtc(nowUtc, tz);

        var tradeTime = nowLocal.Date.AddHours(8);
        var limitTime = TimeSpan.FromHours(9);

        var window = CreateCutOffWindow(
            timeZone,
            nowLocal.DayOfWeek,
            nowLocal.TimeOfDay.Subtract(TimeSpan.FromMinutes(1)),
            nowLocal.TimeOfDay.Add(TimeSpan.FromMinutes(1)),
            tradeTime,
            limitTime
        );

        var result = _evaluator.IsWithinCutoff(new[] { window }, tradeTime, limitTime, out var matched);

        result.Should().BeTrue();
        matched.Should().NotBeNull();
    }

    [TestCase("UTC")]
    [TestCase("America/Sao_Paulo")]
    [TestCase("Central European Standard Time")]
    public void Should_Reject_Trade_After_Limit_Even_If_Inside_Window(string timeZone)
    {
        var nowUtc = DateTime.UtcNow;
        var tz = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
        var nowLocal = TimeZoneInfo.ConvertTimeFromUtc(nowUtc, tz);

        var tradeTime = nowLocal.Date.AddHours(10);
        var limitTime = TimeSpan.FromHours(9);

        var window = CreateCutOffWindow(
            timeZone,
            nowLocal.DayOfWeek,
            nowLocal.TimeOfDay.Subtract(TimeSpan.FromMinutes(1)),
            nowLocal.TimeOfDay.Add(TimeSpan.FromMinutes(1)),
            tradeTime,
            limitTime
        );

        var result = _evaluator.IsWithinCutoff(new[] { window }, tradeTime, limitTime, out var matched);

        result.Should().BeFalse();
        matched.Should().BeNull();
    }

    [TestCase("UTC")]
    [TestCase("America/Sao_Paulo")]
    [TestCase("Central European Standard Time")]
    public void Should_Reject_If_Outside_Window_Even_If_Trade_Is_Before_Limit(string timeZone)
    {
        var nowUtc = DateTime.UtcNow;
        var tz = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
        var nowLocal = TimeZoneInfo.ConvertTimeFromUtc(nowUtc, tz);

        var tradeTime = nowLocal.Date.AddHours(8);
        var limitTime = TimeSpan.FromHours(9);

        var window = CreateCutOffWindow(
            timeZone,
            nowLocal.DayOfWeek,
            nowLocal.TimeOfDay.AddMinutes(5), // come√ßa no futuro
            nowLocal.TimeOfDay.AddMinutes(10),
            tradeTime,
            limitTime
        );

        var result = _evaluator.IsWithinCutoff(new[] { window }, tradeTime, limitTime, out var matched);

        result.Should().BeFalse();
        matched.Should().BeNull();
    }

    [TestCase("UTC")]
    [TestCase("America/Sao_Paulo")]
    [TestCase("Central European Standard Time")]
    public void Should_Accept_If_TradeTime_Is_Null_And_Inside_Window(string timeZone)
    {
        var nowUtc = DateTime.UtcNow;
        var tz = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
        var nowLocal = TimeZoneInfo.ConvertTimeFromUtc(nowUtc, tz);

        var window = CreateCutOffWindow(
            timeZone,
            nowLocal.DayOfWeek,
            nowLocal.TimeOfDay.Subtract(TimeSpan.FromMinutes(1)),
            nowLocal.TimeOfDay.Add(TimeSpan.FromMinutes(1)),
            null,
            null
        );

        var result = _evaluator.IsWithinCutoff(new[] { window }, null, null, out var matched);

        result.Should().BeTrue();
        matched.Should().NotBeNull();
    }

    [TestCase("UTC")]
    [TestCase("America/Sao_Paulo")]
    [TestCase("Central European Standard Time")]
    public void Should_Wait_Until_Window_Is_Valid(string timeZone)
    {
        var nowUtc = DateTime.UtcNow;
        var tz = TimeZoneInfo.FindSystemTimeZoneById(timeZone);
        var nowLocal = TimeZoneInfo.ConvertTimeFromUtc(nowUtc, tz);

        var start = nowLocal.TimeOfDay.Add(TimeSpan.FromSeconds(1));
        var end = start.Add(TimeSpan.FromMinutes(2));

        var window = CreateCutOffWindow(
            timeZone,
            nowLocal.DayOfWeek,
            start,
            end
        );

        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

        Func<Task> act = async () =>
        {
            await _evaluator.WaitUntilWithinCutoffAsync(new[] { window }, null, null, cts.Token);
        };

        act.Should().NotThrowAsync();
    }
}
