using QuickFix;

public interface IFixMessageHandler : IApplication
{
    event Action<SessionID>? OnLogonEvent;
    event Action<SessionID>? OnLogoutEvent;
    event Func<Message, SessionID, Task>? OnAppMessageReceived;
}
using QuickFix;

public class FixMessageHandler : IFixMessageHandler
{
    private readonly ILogger<FixMessageHandler> _logger;

    public event Action<SessionID>? OnLogonEvent;
    public event Action<SessionID>? OnLogoutEvent;
    public event Func<Message, SessionID, Task>? OnAppMessageReceived;

    public FixMessageHandler(ILogger<FixMessageHandler> logger)
    {
        _logger = logger;
    }

    public void OnCreate(SessionID sessionID)
    {
        _logger.LogInformation("[OnCreate] Session created: {0}", sessionID);
    }

    public void OnLogon(SessionID sessionID)
    {
        _logger.LogInformation("[OnLogon] Logon: {0}", sessionID);
        OnLogonEvent?.Invoke(sessionID);
    }

    public void OnLogout(SessionID sessionID)
    {
        _logger.LogInformation("[OnLogout] Logout: {0}", sessionID);
        OnLogoutEvent?.Invoke(sessionID);
    }

    public void ToAdmin(Message message, SessionID sessionID)
    {
        _logger.LogInformation("[ToAdmin] Sent: {0}", message);
    }

    public void FromAdmin(Message message, SessionID sessionID)
    {
        _logger.LogInformation("[FromAdmin] Received: {0}", message);
    }

    public void ToApp(Message message, SessionID sessionID)
    {
        _logger.LogInformation("[ToApp] Sent: {0}", message);
    }

    public void FromApp(Message message, SessionID sessionID)
    {
        _logger.LogInformation("[FromApp] Received: {0}", message);

        if (OnAppMessageReceived != null)
        {
            _ = OnAppMessageReceived.Invoke(message, sessionID);
        }
    }
}
