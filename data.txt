// ==============================
// Arquivo: IFixEngineBootstrapper.cs
// ==============================
using QuickFix;
using System;

namespace FixMessageReader.FixEngine
{
    public interface IFixEngineBootstrapper
    {
        void Start(Action<Message> onMessageReceived);
        void Stop();
    }
}

// ==============================
// Arquivo: IFixMessageHandler.cs
// ==============================
using QuickFix;

namespace FixMessageReader.FixEngine
{
    public interface IFixMessageHandler : IApplication
    {
    }
}

// ==============================
// Arquivo: FixMessageHandler.cs
// ==============================
using QuickFix;

namespace FixMessageReader.FixEngine
{
    public class FixMessageHandler : MessageCracker, IFixMessageHandler
    {
        private readonly Action<Message> _onMessageReceived;

        public FixMessageHandler(Action<Message> onMessageReceived)
        {
            _onMessageReceived = onMessageReceived;
        }

        public void FromApp(Message message, SessionID sessionID)
        {
            Console.WriteLine("[Handler] Received message");
            Crack(message, sessionID);
            _onMessageReceived?.Invoke(message);
        }

        public void OnCreate(SessionID sessionID) { }
        public void OnLogon(SessionID sessionID) => Console.WriteLine($"[Handler] Logon: {sessionID}");
        public void OnLogout(SessionID sessionID) => Console.WriteLine($"[Handler] Logout: {sessionID}");
        public void ToAdmin(Message message, SessionID sessionID) { }
        public void FromAdmin(Message message, SessionID sessionID) { }
        public void ToApp(Message message, SessionID sessionID) { }
    }
}

// ==============================
// Arquivo: FixEngineBootstrapper.cs
// ==============================
using QuickFix;

namespace FixMessageReader.FixEngine
{
    public class FixEngineBootstrapper : IFixEngineBootstrapper
    {
        private SocketInitiator? _initiator;

        public void Start(Action<Message> onMessageReceived)
        {
            var handler = new FixMessageHandler(onMessageReceived);

            var settings = new SessionSettings("App.config");
            var storeFactory = new FileStoreFactory(settings);
            var logFactory = new FileLogFactory(settings);

            _initiator = new SocketInitiator(handler, storeFactory, settings, logFactory);
            _initiator.Start();

            Console.WriteLine("[FixEngineBootstrapper] FIX engine started.");
        }

        public void Stop()
        {
            _initiator?.Stop();
            Console.WriteLine("[FixEngineBootstrapper] FIX engine stopped.");
        }
    }
}

// ==============================
// Arquivo: FixProcessingService.cs
// ==============================
using QuickFix;
using FixMessageReader.FixEngine;

namespace FixMessageReader.Services
{
    public class FixProcessingService
    {
        private readonly IFixEngineBootstrapper _engineBootstrapper;
        private readonly BaseProcessor _processor;

        public FixProcessingService(IFixEngineBootstrapper engineBootstrapper, BaseProcessor processor)
        {
            _engineBootstrapper = engineBootstrapper;
            _processor = processor;
        }

        public void Execute()
        {
            _engineBootstrapper.Start(message => _processor.Push(message));
        }
    }
}

// ==============================
// Arquivo: BaseProcessor.cs
// ==============================
using QuickFix;

namespace FixMessageReader.Services
{
    public abstract class BaseProcessor
    {
        public abstract void Push(Message message);
    }
}

// ==============================
// Arquivo: MyCustomProcessor.cs
// ==============================
using QuickFix;

namespace FixMessageReader.Services
{
    public class MyCustomProcessor : BaseProcessor
    {
        public override void Push(Message message)
        {
            Console.WriteLine($"[MyCustomProcessor] Processing: {message}");
            // Gravação no banco ou lógica de domínio vai aqui
        }
    }
}

// ==============================
// Arquivo: Program.cs
// ==============================
using Microsoft.Extensions.DependencyInjection;
using FixMessageReader.FixEngine;
using FixMessageReader.Services;

class Program
{
    static void Main(string[] args)
    {
        var serviceCollection = new ServiceCollection();
        serviceCollection.AddSingleton<IFixEngineBootstrapper, FixEngineBootstrapper>();
        serviceCollection.AddSingleton<BaseProcessor, MyCustomProcessor>();
        serviceCollection.AddSingleton<FixProcessingService>();

        var serviceProvider = serviceCollection.BuildServiceProvider();

        var service = serviceProvider.GetRequiredService<FixProcessingService>();
        service.Execute();

        Console.ReadLine();
    }
}
