@page "/relatorios"

<h2>Geração de Relatórios</h2>
<p>Utilize os campos abaixo para gerar relatórios personalizados:</p>

<div class="report-form">
    <div class="form-group">
        <label for="dataInicio">Data Início</label>
        <input type="date" id="dataInicio" @bind="DataInicio" class="form-control" />
    </div>

    <div class="form-group">
        <label for="dataFim">Data Fim</label>
        <input type="date" id="dataFim" @bind="DataFim" class="form-control" />
    </div>

    <div class="form-group">
        <label for="codigoCliente">Código do Cliente</label>
        <input type="text" id="codigoCliente" @bind="CodigoCliente" class="form-control" placeholder="Insira o código do cliente" />
    </div>

    <div class="button-group">
        <button @onclick="GerarRelatorio" class="btn btn-primary" disabled="@IsLoading">Gerar Relatório</button>
        @if (!string.IsNullOrEmpty(RelatorioPath))
        {
            <a href="@RelatorioPath" class="btn btn-success" download>Download Relatório</a>
        }
    </div>

    @if (!string.IsNullOrEmpty(MensagemErro))
    {
        <div class="alert alert-danger mt-3">@MensagemErro</div>
    }

    @if (SemDados)
    {
        <div class="alert alert-warning mt-3">Nenhum dado encontrado para o período selecionado.</div>
    }
</div>

@if (IsLoading)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p>Aguarde enquanto o relatório está sendo gerado...</p>
        </div>
    </div>
}

<style>
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        margin-bottom: 10px;
    }
</style>

@code {
    private DateTime? DataInicio { get; set; }
    private DateTime? DataFim { get; set; }
    private string CodigoCliente { get; set; }
    private string RelatorioPath { get; set; }
    private string MensagemErro { get; set; }
    private bool IsLoading { get; set; }
    private bool SemDados { get; set; }

    private async Task GerarRelatorio()
    {
        MensagemErro = string.Empty;
        RelatorioPath = string.Empty;
        SemDados = false;

        if (DataInicio == null || DataFim == null || string.IsNullOrEmpty(CodigoCliente))
        {
            MensagemErro = "Todos os campos são obrigatórios!";
            return;
        }

        if (DataInicio > DataFim)
        {
            MensagemErro = "A data início não pode ser maior que a data fim!";
            return;
        }

        try
        {
            IsLoading = true;

            // Simulação de tempo para gerar relatório
            await Task.Delay(2000);

            // Simulação de lógica para verificar se há dados
            bool dadosExistem = VerificarDados();

            if (!dadosExistem)
            {
                SemDados = true;
                return;
            }

            // Simulação de geração de relatório
            RelatorioPath = $"/downloads/relatorio-{Guid.NewGuid()}.pdf";
        }
        catch (Exception ex)
        {
            MensagemErro = $"Erro ao gerar relatório: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private bool VerificarDados()
    {
        // Simulação de verificação de dados (substituir pela lógica real)
        return DataInicio.Value.Day % 2 == 0; // Apenas para exemplo
    }
}
