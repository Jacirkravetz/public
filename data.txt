ðŸ“Œ Estrutura do Projeto
pgsql
Copiar
Editar
ðŸ“‚ BlazorAuthPKCE
â”‚â”€â”€ ðŸ“‚ Pages
â”‚   â”œâ”€â”€ Index.razor
â”‚   â”œâ”€â”€ Login.razor
â”‚   â”œâ”€â”€ Logout.razor
â”‚â”€â”€ ðŸ“‚ Services
â”‚   â”œâ”€â”€ AuthService.cs
â”‚   â”œâ”€â”€ ApiService.cs
â”‚â”€â”€ ðŸ“‚ Components
â”‚   â”œâ”€â”€ LoadingSpinner.razor
â”‚â”€â”€ ðŸ“‚ Shared
â”‚   â”œâ”€â”€ MainLayout.razor
â”‚â”€â”€ ðŸ“‚ wwwroot
â”‚â”€â”€ App.razor
â”‚â”€â”€ Program.cs
â”‚â”€â”€ BlazorAuthPKCE.csproj
â”‚â”€â”€ appsettings.json
ðŸ“Œ 1. Criando o Projeto
Execute o seguinte comando para criar um Blazor Web App (.NET 8):

sh
Copiar
Editar
dotnet new blazorserver -o BlazorAuthPKCE
cd BlazorAuthPKCE
Em seguida, adicione as dependÃªncias necessÃ¡rias:

sh
Copiar
Editar
dotnet add package Microsoft.Identity.Web
dotnet add package Microsoft.Identity.Web.UI
dotnet add package Microsoft.AspNetCore.Authentication.OpenIdConnect
dotnet add package Microsoft.AspNetCore.Authorization
dotnet add package System.IdentityModel.Tokens.Jwt
dotnet restore
ðŸ“Œ 2. ConfiguraÃ§Ã£o do appsettings.json
Configure os detalhes da sua Azure AD App Registration:

json
Copiar
Editar
{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "Domain": "seu-dominio.onmicrosoft.com",
    "TenantId": "seu-tenant-id",
    "ClientId": "seu-cliente-id",
    "ClientSecret": "seu-cliente-secret",
    "CallbackPath": "/signin-oidc",
    "Scopes": [ "https://graph.microsoft.com/.default" ]
  },
  "ApiSettings": {
    "BaseUrl": "https://api.exemplo.com/",
    "Endpoint": "endpoint",
    "Version": "1.0"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}
ðŸ“Œ 3. ConfiguraÃ§Ã£o de AutenticaÃ§Ã£o no Program.cs
Aqui adicionamos OAuth2 com PKCE, autorizaÃ§Ã£o e serviÃ§os:

csharp
Copiar
Editar
using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.Identity.Web;
using Microsoft.Identity.Web.UI;
using BlazorAuthPKCE.Services;

var builder = WebApplication.CreateBuilder(args);

// Configura autenticaÃ§Ã£o Azure AD PKCE
builder.Services.AddAuthentication(OpenIdConnectDefaults.AuthenticationScheme)
    .AddMicrosoftIdentityWebApp(builder.Configuration.GetSection("AzureAd"))
    .EnableTokenAcquisitionToCallDownstreamApi(builder.Configuration["AzureAd:Scopes"])
    .AddInMemoryTokenCaches();

// Configura autorizaÃ§Ã£o global
builder.Services.AddAuthorization(options =>
{
    options.FallbackPolicy = options.DefaultPolicy;
});

// Adiciona Blazor e suporte a Identity UI
builder.Services.AddRazorPages()
    .AddMicrosoftIdentityUI();
builder.Services.AddServerSideBlazor()
    .AddMicrosoftIdentityConsentHandler();

// InjeÃ§Ã£o de serviÃ§os
builder.Services.AddHttpContextAccessor();
builder.Services.AddScoped<AuthService>();
builder.Services.AddScoped<ApiService>();
builder.Services.AddHttpClient();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

app.MapBlazorHub();
app.MapFallbackToPage("/_Host");
app.MapControllers();

app.Run();
ðŸ“Œ 4. Criando o ServiÃ§o de AutenticaÃ§Ã£o (AuthService.cs)
Este serviÃ§o gerencia tokens OAuth2 de forma eficiente:

csharp
Copiar
Editar
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Http;
using System.Security.Claims;

namespace BlazorAuthPKCE.Services
{
    public class AuthService
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public AuthService(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        public async Task<string?> GetAccessTokenAsync()
        {
            var httpContext = _httpContextAccessor.HttpContext;
            if (httpContext == null)
                return null;

            return await httpContext.GetTokenAsync("access_token");
        }

        public string? GetUserName()
        {
            return _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Name)?.Value;
        }

        public bool IsAuthenticated()
        {
            return _httpContextAccessor.HttpContext?.User?.Identity?.IsAuthenticated ?? false;
        }
    }
}
ðŸ“Œ 5. Criando o ServiÃ§o de Chamada da API (ApiService.cs)
Esse serviÃ§o faz chamadas seguras Ã  API protegida:

csharp
Copiar
Editar
using System.Net.Http.Headers;
using Microsoft.Extensions.Configuration;

namespace BlazorAuthPKCE.Services
{
    public class ApiService
    {
        private readonly HttpClient _httpClient;
        private readonly AuthService _authService;
        private readonly IConfiguration _configuration;

        public ApiService(HttpClient httpClient, AuthService authService, IConfiguration configuration)
        {
            _httpClient = httpClient;
            _authService = authService;
            _configuration = configuration;
        }

        public async Task<string> GetDataFromApiAsync()
        {
            string? token = await _authService.GetAccessTokenAsync();
            if (string.IsNullOrEmpty(token))
                return "Token invÃ¡lido.";

            string baseUrl = _configuration["ApiSettings:BaseUrl"];
            string endpoint = _configuration["ApiSettings:Endpoint"];

            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            HttpResponseMessage response = await _httpClient.GetAsync($"{baseUrl}{endpoint}");
            return response.IsSuccessStatusCode
                ? await response.Content.ReadAsStringAsync()
                : $"Erro: {response.StatusCode}";
        }
    }
}
ðŸ“Œ 6. Criando a PÃ¡gina de Login (Login.razor)
razor
Copiar
Editar
@page "/login"
@inject NavigationManager Navigation

<h3>Login</h3>
<button class="btn btn-primary" @onclick="Login">Entrar com Microsoft</button>

@code {
    private void Login() => Navigation.NavigateTo("MicrosoftIdentity/Account/SignIn", true);
}
ðŸ“Œ 7. Criando a PÃ¡gina Principal (Index.razor)
razor
Copiar
Editar
@page "/"
@inject ApiService ApiService
@inject AuthService AuthService

<h3>Bem-vindo, @AuthService.GetUserName()!</h3>

@if (AuthService.IsAuthenticated())
{
    <button class="btn btn-primary" @onclick="ChamarApi">Chamar API</button>
    <p>@resultado</p>
}
else
{
    <p>VocÃª precisa estar autenticado para acessar esta pÃ¡gina.</p>
}

@code {
    private string resultado = "Clique para buscar dados da API.";

    private async Task ChamarApi()
    {
        resultado = await ApiService.GetDataFromApiAsync();
    }
}
ðŸ“Œ 8. Criando a PÃ¡gina de Logout (Logout.razor)
razor
Copiar
Editar
@page "/logout"
@inject NavigationManager Navigation

<h3>Sair</h3>
<button class="btn btn-danger" @onclick="Logout">Sair</button>

@code {
    private void Logout() => Navigation.NavigateTo("MicrosoftIdentity/Account/SignOut", true);
}
ðŸ“Œ 9. Rodando o Projeto
Execute o seguinte comando:

sh
Copiar
Editar
dotnet run
ðŸš€ Acesse https://localhost:5001/ e teste a autenticaÃ§Ã£o!
