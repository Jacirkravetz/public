using System;
using System.ComponentModel.DataAnnotations;

public class InputParameters
{
    [Required]
    public DateTime BusinessDate { get; set; } = DateTime.Today;

    [Range(1, int.MaxValue, ErrorMessage = "Vers√£o deve ser maior que 0")]
    public int Version { get; set; } = 1;

    [Required]
    public string AdHoc { get; set; } = "N";

    [Required(ErrorMessage = "Selecione um Feed")]
    public string Feed { get; set; } = string.Empty;

    [Range(1, int.MaxValue, ErrorMessage = "ID deve ser maior que 0")]
    public int ArchiveID { get; set; } = 1;

    public DateTime InitialDate { get; set; } = DateTime.Today.AddDays(-7);
    public DateTime EndDate { get; set; } = DateTime.Today;
}



using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;

public class GeraServices
{
    private readonly ILogger<GeraServices> _logger;

    public GeraServices(ILogger<GeraServices> logger)
    {
        _logger = logger;
    }

    public async Task InitGenerateFiles(InputParameters parameters, Action<LogEntry> logCallback)
    {
        try
        {
            logCallback?.Invoke(new LogEntry("üü¢ Iniciando gera√ß√£o dos feeds...", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"üìÖ Business Date: {parameters.BusinessDate:yyyy-MM-dd}", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"üî¢ Version: {parameters.Version}", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"‚ö° AdHoc: {parameters.AdHoc}", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"üì¶ Feed: {parameters.Feed}", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"üÜî ArchiveID: {parameters.ArchiveID}", LogLevel.Information));

            await Task.Delay(1000);
            logCallback?.Invoke(new LogEntry($"‚è≥ Per√≠odo: {parameters.InitialDate:yyyy-MM-dd} at√© {parameters.EndDate:yyyy-MM-dd}", LogLevel.Information));

            if (parameters.Version < 1)
            {
                logCallback?.Invoke(new LogEntry("‚ö†Ô∏è Vers√£o inv√°lida, processo abortado.", LogLevel.Warning));
                return;
            }

            await Task.Delay(2000);
            logCallback?.Invoke(new LogEntry("‚úÖ Processo finalizado com sucesso!", LogLevel.Information));

        }
        catch (Exception ex)
        {
            logCallback?.Invoke(new LogEntry($"‚ùå Erro na gera√ß√£o: {ex.Message}", LogLevel.Error));
            _logger.LogError(ex, "Erro ao gerar feed.");
        }
    }
}

public class LogEntry
{
    public string Message { get; }
    public LogLevel Level { get; }

    public LogEntry(string message, LogLevel level)
    {
        Message = message;
        Level = level;
    }
}

@page "/feed-generation"
@inject IConfiguration Configuration
@inject GeraServices GeraServices

<div class="container">
    <div class="row">
        <!-- Formul√°rio -->
        <div class="col-lg-8 col-md-12">
            <h3 class="mb-3">üîπ Gera√ß√£o de Feeds</h3>

            <EditForm Model="@inputParameters" OnValidSubmit="@GenerateFeed">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>üìÖ Business Date:</label>
                    <InputDate @bind-Value="inputParameters.BusinessDate" class="form-control" />
                </div>

                <div class="form-group">
                    <label>üî¢ Version:</label>
                    <InputNumber @bind-Value="inputParameters.Version" class="form-control" />
                </div>

                <div class="form-group">
                    <label>‚ö° AdHoc:</label>
                    <InputSelect @bind-Value="inputParameters.AdHoc" class="form-control">
                        <option value="S">Sim</option>
                        <option value="N">N√£o</option>
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>üì¶ Feed:</label>
                    <InputSelect @bind-Value="inputParameters.Feed" class="form-control">
                        <option value="">Selecione um Feed</option>
                        @foreach (var feed in FeedList)
                        {
                            <option value="@feed">@feed</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <label>üÜî Archive ID:</label>
                    <InputNumber @bind-Value="inputParameters.ArchiveID" class="form-control" />
                </div>

                <div class="form-group">
                    <label>‚è≥ Initial Date:</label>
                    <InputDate @bind-Value="inputParameters.InitialDate" class="form-control" />
                </div>

                <div class="form-group">
                    <label>‚è≥ End Date:</label>
                    <InputDate @bind-Value="inputParameters.EndDate" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary w-100 mt-3" disabled="@isGenerating">
                    @(isGenerating ? "Gerando..." : "üöÄ Gerar Feed")
                </button>
            </EditForm>
        </div>

        <!-- Logs -->
        <div class="col-lg-4 col-md-12 logs-panel">
            <h4>üìú Logs</h4>
            <div class="logs-container">
                @foreach (var log in Logs)
                {
                    <div class="log-entry @GetLogClass(log.Level)">
                        <strong>@log.Level:</strong> @log.Message
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private InputParameters inputParameters = new();
    private List<string> FeedList = new();
    private List<LogEntry> Logs = new();
    private bool isGenerating = false;

    protected override void OnInitialized()
    {
        FeedList = Configuration.GetSection("Feeds").Get<List<string>>() ?? new List<string>();
    }

    private async Task GenerateFeed()
    {
        isGenerating = true;
        Logs.Clear();
        Logs.Add(new LogEntry("üîÑ Iniciando gera√ß√£o...", LogLevel.Information));

        await Task.Run(async () =>
        {
            await GeraServices.InitGenerateFiles(inputParameters, async log =>
            {
                Logs.Add(log);
                await InvokeAsync(StateHasChanged);
            });
        });

        isGenerating = false;
    }

    private string GetLogClass(LogLevel level) =>
        level switch
        {
            LogLevel.Information => "log-info",
            LogLevel.Warning => "log-warning",
            LogLevel.Error => "log-error",
            _ => ""
        };
}
