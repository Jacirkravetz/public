public string TimeZoneId { get; set; } // Example: "Central European Standard Time"
public static bool IsWithinCutoff(CutOffWindow[] windows, bool isHoliday)
{
    foreach (var window in windows)
    {
        // Get the timezone info from the configured ID
        TimeZoneInfo timeZone;
        try
        {
            timeZone = TimeZoneInfo.FindSystemTimeZoneById(window.TimeZoneId);
        }
        catch (TimeZoneNotFoundException)
        {
            Console.WriteLine($"⚠️ Time zone not found: {window.TimeZoneId}");
            continue;
        }
        catch (InvalidTimeZoneException)
        {
            Console.WriteLine($"⚠️ Invalid time zone: {window.TimeZoneId}");
            continue;
        }

        // Convert UTC to the window's local time
        var localTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timeZone);
        var localDay = localTime.DayOfWeek;
        var localTimeOfDay = localTime.TimeOfDay;

        if (window.DayOfWeek != localDay)
            continue;

        if (window.ExcludeHolidays && isHoliday)
            continue;

        if (localTimeOfDay >= window.StartTime && localTimeOfDay <= window.EndTime)
            return true;
    }

    // Log all configured windows if none matched
    var sb = new StringBuilder();
    sb.AppendLine("❌ Outside of all Cut-Off Windows.");
    sb.AppendLine("🕒 Configured Cut-Off Windows:");

    foreach (var w in windows.OrderBy(w => w.DayOfWeek).ThenBy(w => w.StartTime))
    {
        sb.AppendLine($"- {w.DayOfWeek}: {w.StartTime:hh\\:mm} - {w.EndTime:hh\\:mm} " +
                      $"(Exclude holidays: {(w.ExcludeHolidays ? "Yes" : "No")}, " +
                      $"TimeZone: {w.TimeZoneId})");
    }

    Console.WriteLine(sb.ToString());
    return false;
}
