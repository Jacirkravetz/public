/LogAndDbProcessor
 ├── Program.cs
 ├── MainForm.cs
 ├── LogExtractorForm.cs
 ├── DatabaseProcessorForm.cs
 ├── Services
 │    ├── LogExtractorService.cs
 │    ├── DatabaseService.cs
 │    ├── ApiService.cs
 ├── Models
 │    ├── DatabaseRecord.cs
 │    ├── ApiResult.cs



using System;
using System.Windows.Forms;
using LogAndDbProcessor.Services;

namespace LogAndDbProcessor
{
    public partial class LogExtractorForm : Form
    {
        private readonly LogExtractorService _logService = new LogExtractorService();

        public LogExtractorForm()
        {
            InitializeComponent();

            var lblSource = new Label { Text = "Source Directory:", Top = 20, Left = 20 };
            var txtSource = new TextBox { Top = 40, Left = 20, Width = 300 };
            var btnBrowseSource = new Button { Text = "...", Top = 40, Left = 330 };
            btnBrowseSource.Click += (s, e) =>
            {
                using var dialog = new FolderBrowserDialog();
                if (dialog.ShowDialog() == DialogResult.OK)
                    txtSource.Text = dialog.SelectedPath;
            };

            var lblOutput = new Label { Text = "Output Directory:", Top = 80, Left = 20 };
            var txtOutput = new TextBox { Top = 100, Left = 20, Width = 300 };
            var btnBrowseOutput = new Button { Text = "...", Top = 100, Left = 330 };
            btnBrowseOutput.Click += (s, e) =>
            {
                using var dialog = new FolderBrowserDialog();
                if (dialog.ShowDialog() == DialogResult.OK)
                    txtOutput.Text = dialog.SelectedPath;
            };

            var btnProcess = new Button { Text = "Process Logs", Top = 140, Left = 20, Width = 150 };
            btnProcess.Click += async (s, e) =>
            {
                btnProcess.Enabled = false;
                try
                {
                    await _logService.ProcessLogsAsync(txtSource.Text, txtOutput.Text);
                    MessageBox.Show("Logs processed successfully!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error: {ex.Message}");
                }
                finally
                {
                    btnProcess.Enabled = true;
                }
            };

            Controls.Add(lblSource);
            Controls.Add(txtSource);
            Controls.Add(btnBrowseSource);
            Controls.Add(lblOutput);
            Controls.Add(txtOutput);
            Controls.Add(btnBrowseOutput);
            Controls.Add(btnProcess);

            Text = "Log Extractor";
            Width = 420;
            Height = 240;
        }
    }
}
