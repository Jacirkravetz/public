using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using QuickFix;

public class FixSessionManager
{
    private string _tempDictionaryPath;

    public SocketInitiator CreateInitiator(string fixConfig, string base64Dictionary, IApplication application, IMessageStoreFactory storeFactory, ILogFactory logFactory)
    {
        // 1. Decodificar base64 para XML
        string xmlContent = Encoding.UTF8.GetString(Convert.FromBase64String(base64Dictionary));

        // 2. Salvar temporariamente o DataDictionary
        _tempDictionaryPath = Path.Combine(Path.GetTempPath(), $"fix-dictionary-temp-{Guid.NewGuid()}.xml");
        File.WriteAllText(_tempDictionaryPath, xmlContent);

        // 3. Modificar fixConfig para usar o arquivo temporário
        string fixedConfig = FixConfigWithDictionaryPath(fixConfig, _tempDictionaryPath);

        // 4. Carregar o SessionSettings da string modificada
        var settings = LoadSessionSettingsFromString(fixedConfig);

        // 5. Criar e retornar o SocketInitiator
        var initiator = new SocketInitiator(application, storeFactory, settings, logFactory);
        return initiator;
    }

    // Remove a chave DataDictionary antiga e adiciona o novo caminho na seção DEFAULT e SESSION (se existir)
    private string FixConfigWithDictionaryPath(string config, string dictionaryPath)
    {
        var lines = new List<string>(config.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None));
        bool inDefaultSection = false;
        bool inSessionSection = false;

        for (int i = 0; i < lines.Count; i++)
        {
            var line = lines[i].Trim();

            if (line.StartsWith("[DEFAULT]", StringComparison.OrdinalIgnoreCase))
            {
                inDefaultSection = true;
                inSessionSection = false;
            }
            else if (line.StartsWith("[SESSION]", StringComparison.OrdinalIgnoreCase))
            {
                inDefaultSection = false;
                inSessionSection = true;
            }
            else if (line.StartsWith("[") && line.EndsWith("]"))
            {
                inDefaultSection = false;
                inSessionSection = false;
            }

            // Substituir ou adicionar DataDictionary na seção DEFAULT e SESSION
            if ((inDefaultSection || inSessionSection) && line.StartsWith("DataDictionary", StringComparison.OrdinalIgnoreCase))
            {
                lines[i] = $"DataDictionary={dictionaryPath}";
            }
        }

        // Se não achou DataDictionary na DEFAULT, adiciona no final da DEFAULT
        if (!lines.Exists(l => l.TrimStart().StartsWith("DataDictionary", StringComparison.OrdinalIgnoreCase)))
        {
            int defaultIndex = lines.FindIndex(l => l.Trim().Equals("[DEFAULT]", StringComparison.OrdinalIgnoreCase));
            if (defaultIndex >= 0)
            {
                // Procurar onde termina a DEFAULT para inserir logo após
                int insertIndex = defaultIndex + 1;
                while (insertIndex < lines.Count && !lines[insertIndex].StartsWith("["))
                    insertIndex++;

                lines.Insert(insertIndex, $"DataDictionary={dictionaryPath}");
            }
        }

        return string.Join(Environment.NewLine, lines);
    }

    // Carrega SessionSettings de uma string INI (usando MemoryStream)
    private SessionSettings LoadSessionSettingsFromString(string iniContent)
    {
        using var ms = new MemoryStream(Encoding.UTF8.GetBytes(iniContent));
        return new SessionSettings(ms);
    }

    // Método para limpar arquivo temporário quando não for mais necessário
    public void Cleanup()
    {
        if (_tempDictionaryPath != null && File.Exists(_tempDictionaryPath))
        {
            try
            {
                File.Delete(_tempDictionaryPath);
            }
            catch { /* ignore */ }
        }
    }
}
