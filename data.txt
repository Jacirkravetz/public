using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text.RegularExpressions;
using System.Text.Json.Nodes;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Http;

namespace LogExtractorApp
{
    public partial class DataProcessorForm : Form
    {
        private readonly string _connectionString = "Server=YOUR_SERVER;Database=YOUR_DB;Trusted_Connection=True;TrustServerCertificate=True;";
        private readonly string _apiUrl = "https://yourapi.com/data"; // base API URL (without trailing slash)

        private readonly HttpClient _httpClient = new HttpClient();

        public DataProcessorForm()
        {
            InitializeComponent();

            // Set default combo selections (just in case)
            cmbHasDelivery.SelectedIndex = 0;     // Any
            cmbHasConfirmation.SelectedIndex = 0; // Any
            cmbHasResponse.SelectedIndex = 0;     // Any

            // Attach event handlers
            btnLoadData.Click += BtnLoadData_Click;
            btnApplyRegexFilter.Click += BtnApplyRegexFilter_Click;
            btnProcessSelected.Click += BtnProcessSelected_Click;
        }

        private async void BtnLoadData_Click(object sender, EventArgs e)
        {
            try
            {
                // Build WHERE clauses based on combo selections
                var conditions = new List<string>();

                if (cmbHasDelivery.SelectedItem?.ToString() == "Yes")
                    conditions.Add("Has_Delivery = 1");
                else if (cmbHasDelivery.SelectedItem?.ToString() == "No")
                    conditions.Add("(Has_Delivery = 0 OR Has_Delivery IS NULL)");

                if (cmbHasConfirmation.SelectedItem?.ToString() == "Yes")
                    conditions.Add("Has_Confirmation = 1");
                else if (cmbHasConfirmation.SelectedItem?.ToString() == "No")
                    conditions.Add("(Has_Confirmation = 0 OR Has_Confirmation IS NULL)");

                if (cmbHasResponse.SelectedItem?.ToString() == "Yes")
                    conditions.Add("Has_Response = 1");
                else if (cmbHasResponse.SelectedItem?.ToString() == "No")
                    conditions.Add("(Has_Response = 0 OR Has_Response IS NULL)");

                string whereClause = conditions.Count > 0 ? "WHERE " + string.Join(" AND ", conditions) : "";

                string sql = $"SELECT TOP 100000 * FROM YourLargeTable {whereClause}";

                using var conn = new SqlConnection(_connectionString);
                using var cmd = new SqlCommand(sql, conn);

                await conn.OpenAsync();

                var adapter = new SqlDataAdapter(cmd);
                var dt = new DataTable();
                adapter.Fill(dt);

                dataGridViewResults.DataSource = dt;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading data:\n{ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnApplyRegexFilter_Click(object sender, EventArgs e)
        {
            try
            {
                string pattern = txtRegexPattern.Text.Trim();
                if (string.IsNullOrWhiteSpace(pattern))
                {
                    MessageBox.Show("Please enter a regex pattern to filter.", "Validation", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                if (dataGridViewResults.DataSource is not DataTable dt)
                {
                    MessageBox.Show("No data loaded to filter.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                var filtered = dt.Clone(); // clone structure

                foreach (DataRow row in dt.Rows)
                {
                    foreach (var item in row.ItemArray)
                    {
                        if (Regex.IsMatch(item?.ToString() ?? string.Empty, pattern, RegexOptions.IgnoreCase))
                        {
                            filtered.ImportRow(row);
                            break;
                        }
                    }
                }

                dataGridViewResults.DataSource = filtered;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error applying regex filter:\n{ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void BtnProcessSelected_Click(object sender, EventArgs e)
        {
            if (dataGridViewResults.SelectedRows.Count == 0)
            {
                MessageBox.Show("Please select one or more rows to process.", "No Selection", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            btnProcessSelected.Enabled = false;

            try
            {
                foreach (DataGridViewRow row in dataGridViewResults.SelectedRows)
                {
                    if (row.Cells["Id"]?.Value == null)
                        continue;

                    string id = row.Cells["Id"].Value.ToString();
                    string requestUrl = $"{_apiUrl}/{id}";

                    try
                    {
                        var response = await _httpClient.GetAsync(requestUrl);
                        if (!response.IsSuccessStatusCode)
                        {
                            MessageBox.Show($"API call failed for ID {id}: {response.StatusCode}", "API Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                            continue;
                        }

                        var jsonString = await response.Content.ReadAsStringAsync();

                        // Parse JSON dynamically using JsonNode
                        var jsonNode = JsonNode.Parse(jsonString);

                        // Save the raw JSON string to database
                        await SaveApiResultToDatabaseAsync(id, jsonString);
                    }
                    catch (Exception apiEx)
                    {
                        MessageBox.Show($"Error calling API for ID {id}:\n{apiEx.Message}", "API Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

                MessageBox.Show("Selected rows processed successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            finally
            {
                btnProcessSelected.Enabled = true;
            }
        }

        private async Task SaveApiResultToDatabaseAsync(string id, string rawJson)
        {
            // Assume you have a table 'ProcessedResults' with columns:
            // RecordId NVARCHAR, ResultJson NVARCHAR(MAX), ProcessedAt DATETIME
            const string insertSql = @"
                INSERT INTO ProcessedResults (RecordId, ResultJson, ProcessedAt)
                VALUES (@RecordId, @ResultJson, @ProcessedAt)
            ";

            using var conn = new SqlConnection(_connectionString);
            using var cmd = new SqlCommand(insertSql, conn);

            cmd.Parameters.AddWithValue("@RecordId", id);
            cmd.Parameters.AddWithValue("@ResultJson", rawJson);
            cmd.Parameters.AddWithValue("@ProcessedAt", DateTime.UtcNow);

            await conn.OpenAsync();
            await cmd.ExecuteNonQueryAsync();
        }
    }
}
