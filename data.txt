using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Apache.Avro;
using Apache.Avro.Generic;
using Confluent.Kafka;

namespace KafkaProducerAvro
{
    public class KafkaAvroProducer
    {
        private readonly string _bootstrapServers;
        private readonly string _topic;
        private readonly Schema _schema;

        public KafkaAvroProducer(string bootstrapServers, string topic, string avroSchemaJson)
        {
            _bootstrapServers = bootstrapServers;
            _topic = topic;
            _schema = Schema.Parse(avroSchemaJson);
        }

        public async Task SendMessagesAsync(DataTable dataTable)
        {
            var config = new ProducerConfig
            {
                BootstrapServers = _bootstrapServers
            };

            using (var producer = new ProducerBuilder<string, byte[]>(config).Build())
            {
                foreach (DataRow row in dataTable.Rows)
                {
                    var record = CreateGenericRecord(row);
                    var avroBytes = SerializeRecordToAvro(record);

                    var message = new Message<string, byte[]>
                    {
                        Key = Guid.NewGuid().ToString(), // Pode ser ajustado conforme sua necessidade
                        Value = avroBytes
                    };

                    var deliveryResult = await producer.ProduceAsync(_topic, message);

                    Console.WriteLine($"Mensagem enviada para {deliveryResult.TopicPartitionOffset}");
                }
            }
        }

        private GenericRecord CreateGenericRecord(DataRow row)
        {
            var record = new GenericRecord((RecordSchema)_schema);

            foreach (DataColumn column in row.Table.Columns)
            {
                if (row[column] == DBNull.Value)
                {
                    record.Add(column.ColumnName, null);
                }
                else
                {
                    record.Add(column.ColumnName, row[column]);
                }
            }

            return record;
        }

        private byte[] SerializeRecordToAvro(GenericRecord record)
        {
            using (var stream = new MemoryStream())
            {
                var writer = new BinaryEncoder(stream);
                var avroWriter = new GenericWriter<GenericRecord>(_schema);

                avroWriter.Write(record, writer);
                writer.Flush();

                return stream.ToArray();
            }
        }
    }
}
