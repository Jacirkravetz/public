using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Xml.Linq;

public static class XmlMultiSectionExtractor
{
    public static DataTable ExtractSectionsToDataTable(
        string xmlContent,
        string? parentTag,
        List<string> sectionsToExtract,
        bool includeRootAttributes = true)
    {
        var doc = XDocument.Parse(xmlContent);
        var root = doc.Root ?? throw new Exception("Invalid XML");

        // Se não especificado, começa da raiz
        var parentElements = string.IsNullOrEmpty(parentTag)
            ? new List<XElement> { root }
            : doc.Descendants(parentTag).ToList();

        var dataTable = new DataTable();

        foreach (var parent in parentElements)
        {
            var rowDataList = new List<Dictionary<string, string>>();

            // Coleta dados da raiz se desejado
            var rootData = includeRootAttributes ? FlattenElement(root, "Root") : new Dictionary<string, string>();

            // Para cada seção desejada
            foreach (var section in sectionsToExtract)
            {
                var sectionElements = parent.Descendants(section).ToList();

                if (sectionElements.Count == 0)
                {
                    // Nenhuma ocorrência, adicionar linha com dados da raiz
                    rowDataList.Add(new Dictionary<string, string>(rootData));
                }
                else
                {
                    foreach (var element in sectionElements)
                    {
                        var flattened = FlattenElement(element, section);
                        var combined = new Dictionary<string, string>(rootData);

                        foreach (var kvp in flattened)
                            combined[kvp.Key] = kvp.Value;

                        rowDataList.Add(combined);
                    }
                }
            }

            // Preencher DataTable
            foreach (var rowDict in rowDataList)
            {
                foreach (var col in rowDict.Keys)
                {
                    if (!dataTable.Columns.Contains(col))
                        dataTable.Columns.Add(col);
                }

                var row = dataTable.NewRow();
                foreach (var kvp in rowDict)
                    row[kvp.Key] = kvp.Value;

                dataTable.Rows.Add(row);
            }
        }

        return dataTable;
    }

    private static Dictionary<string, string> FlattenElement(XElement element, string prefix)
    {
        var result = new Dictionary<string, string>();

        // Adiciona atributos
        foreach (var attr in element.Attributes())
        {
            var key = $"{prefix}_{attr.Name.LocalName}";
            result[key] = attr.Value;
        }

        // Adiciona filhos
        foreach (var child in element.Elements())
        {
            var childPrefix = $"{prefix}_{child.Name.LocalName}";
            if (child.HasElements)
            {
                var nested = FlattenElement(child, childPrefix);
                foreach (var kvp in nested)
                    result[kvp.Key] = kvp.Value;
            }
            else
            {
                result[childPrefix] = child.Value;
            }
        }

        // Se for elemento texto direto (sem filhos)
        if (!element.HasElements && !element.HasAttributes)
        {
            result[prefix] = element.Value;
        }

        return result;
    }
}



string xml = @"
<NotaFiscal>
  <DataGlobal>2025-05-08</DataGlobal>
  <Pedido id='123'>
    <Comprador>
      <Nome>João</Nome>
      <CPF>12345678900</CPF>
    </Comprador>
    <EnderecoEntrega>
      <Rua>Rua A</Rua>
      <Cidade>São Paulo</Cidade>
    </EnderecoEntrega>
  </Pedido>
  <Pedido id='456'>
    <Comprador>
      <Nome>Maria</Nome>
      <CPF>98765432100</CPF>
    </Comprador>
    <EnderecoEntrega>
      <Rua>Rua B</Rua>
      <Cidade>Rio de Janeiro</Cidade>
    </EnderecoEntrega>
  </Pedido>
</NotaFiscal>";

var dt = XmlMultiSectionExtractor.ExtractSectionsToDataTable(
    xml,
    parentTag: "Pedido",
    sectionsToExtract: new List<string> { "Comprador", "EnderecoEntrega" }
);

// Print sample
foreach (DataRow row in dt.Rows)
{
    foreach (DataColumn col in dt.Columns)
        Console.Write($"{col.ColumnName}: {row[col]} | ");
    Console.WriteLine();
}

