using System;
using System.IO;
using System.IO.Compression;
using System.Formats.Tar;
using System.Windows.Forms;

namespace LogExtractorApp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void btnSelectSource_Click(object sender, EventArgs e)
        {
            using (var folderDialog = new FolderBrowserDialog())
            {
                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    txtSourceDir.Text = folderDialog.SelectedPath;
                }
            }
        }

        private void btnSelectOutput_Click(object sender, EventArgs e)
        {
            using (var folderDialog = new FolderBrowserDialog())
            {
                if (folderDialog.ShowDialog() == DialogResult.OK)
                {
                    txtOutputDir.Text = folderDialog.SelectedPath;
                }
            }
        }

        private void btnProcess_Click(object sender, EventArgs e)
        {
            if (!Directory.Exists(txtSourceDir.Text))
            {
                MessageBox.Show("Selecione um diretório de origem válido!", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (!Directory.Exists(txtOutputDir.Text))
            {
                Directory.CreateDirectory(txtOutputDir.Text);
            }

            var files = Directory.GetFiles(txtSourceDir.Text, "*.*", SearchOption.TopDirectoryOnly);

            foreach (var filePath in files)
            {
                string extension = Path.GetExtension(filePath).ToLower();
                string fileName = Path.GetFileName(filePath);

                try
                {
                    if (extension == ".log")
                    {
                        string destPath = Path.Combine(txtOutputDir.Text, fileName);
                        File.Copy(filePath, destPath, overwrite: true);
                        AddRow(fileName, "Copiado");
                    }
                    else if (extension == ".gz" && fileName.EndsWith(".tar.gz", StringComparison.OrdinalIgnoreCase))
                    {
                        string tempTarPath = Path.Combine(txtOutputDir.Text, Path.GetFileNameWithoutExtension(fileName));
                        Directory.CreateDirectory(tempTarPath);

                        string tempTarFile = Path.Combine(tempTarPath, Path.GetFileNameWithoutExtension(fileName) + ".tar");

                        using (FileStream originalFileStream = File.OpenRead(filePath))
                        using (FileStream decompressedFileStream = File.Create(tempTarFile))
                        using (GZipStream decompressionStream = new GZipStream(originalFileStream, CompressionMode.Decompress))
                        {
                            decompressionStream.CopyTo(decompressedFileStream);
                        }

                        TarFile.ExtractToDirectory(tempTarFile, tempTarPath, overwriteFiles: true);
                        File.Delete(tempTarFile);

                        AddRow(fileName, "Extraído");
                    }
                }
                catch (Exception ex)
                {
                    AddRow(fileName, "Erro: " + ex.Message);
                }
            }

            MessageBox.Show("Processamento concluído!", "Sucesso", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            dataGridLogs.Rows.Clear();
        }

        private void AddRow(string fileName, string status)
        {
            dataGridLogs.Rows.Add(fileName, status, DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));
        }
    }
}
